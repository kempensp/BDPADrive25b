<!DOCTYPE html>
<html>
<head>
  <title>BDPADrive - Editor</title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
</head>
<body>
  <div class="dashboard">
    <nav class="top-nav">
      <div class="nav-brand">BDPADrive</div>
      <div class="nav-links">
        <a href="/dashboard">My Files</a>
        <a href="/search">Search</a>
      </div>
      <div class="nav-user">
        <span><%= user.username %></span>
        <form action="/auth/logout" method="POST" style="display: inline;">
          <button type="submit" class="btn-link">Logout</button>
        </form>
      </div>
    </nav>
    <div class="content">
      <h1>Edit: <input type="text" id="filename" value="<%= file.name %>" <%= file.owner !== user.username ? 'readonly' : '' %> /></h1>
      <form id="editorForm" onsubmit="return false;">
        <textarea id="fileText" rows="15" style="width:100%" <%= file.owner !== user.username ? 'readonly' : '' %>><%= file.text %></textarea>
        <div>
          <label>Tags (comma separated):</label>
          <input type="text" id="tags" value="<%= file.tags ? file.tags.join(', ') : '' %>" <%= file.owner !== user.username ? 'readonly' : '' %> />
        </div>
        <% if (file.owner === user.username) { %>
        <button type="button" onclick="saveFile()" class="btn-primary">Save</button>
        <button type="button" onclick="deleteFile()" class="btn-secondary">Delete</button>
        <% } %>
        <span id="saveStatus"></span>
      </form>
      <h2>Preview</h2>
      <div id="preview" class="markdown-preview"><%- html %></div>
    </div>
  </div>
  <script>
    const nodeId = "<%= file.node_id %>";
    let autosaveTimer = null;
    function saveFile() {
      fetch(`/editor/${nodeId}/save`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          text: document.getElementById('fileText').value,
          tags: document.getElementById('tags').value,
          name: document.getElementById('filename').value
        })
      }).then(res => res.json()).then(data => {
        if (data.success) {
          document.getElementById('saveStatus').textContent = 'Saved!';
        } else {
          document.getElementById('saveStatus').textContent = 'Save failed: ' + (data.error || 'Unknown error');
        }
      });
    }
    function deleteFile() {
      if (!confirm('Are you sure you want to delete this file?')) return;
      fetch(`/editor/${nodeId}/delete`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      }).then(res => res.json()).then(data => {
        if (data.success) {
          alert('Deleted!');
          window.location = '/dashboard';
        } else {
          alert('Delete failed: ' + (data.error || 'Unknown error'));
        }
      });
    }
    // Live preview
    document.getElementById('fileText').addEventListener('input', function() {
      fetch('/api/markdown', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: this.value })
      })
      .then(res => res.text())
      .then(html => {
        document.getElementById('preview').innerHTML = html;
      });
      // Autosave
      if (autosaveTimer) clearTimeout(autosaveTimer);
      autosaveTimer = setTimeout(saveFile, 10000); // 10s autosave
    });
  </script>
</body>
</html>
